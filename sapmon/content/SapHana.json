{
    "checks": [
        {
            "name": "HostConfig",
            "description": "SAP HANA Host Config",
            "customLog": "SapHana_HostConfig",
            "frequencySecs": 60,
            "includeInCustomerAnalytics": true,
            "actions": [
                {
                    "type": "ExecuteSql",
                    "parameters": {
                        "sql": "SELECT hi.VALUE AS IP, lhc.* FROM SYS.M_LANDSCAPE_HOST_CONFIGURATION lhc LEFT OUTER JOIN SYS.M_HOST_INFORMATION hi ON lhc.HOST=hi.HOST AND hi.KEY='net_publicname' ORDER BY HOST_ACTIVE DESC, INDEXSERVER_ACTUAL_ROLE ASC"
                    }
                },
                {
                    "type": "ParseHostConfig"
                }
            ]
        },
        {
            "name": "HostInformation",
            "description": "SAP HANA Host Information",
            "customLog": "SapHana_HostInformation",
            "frequencySecs": 86400,
            "includeInCustomerAnalytics": true,
            "actions": [
                {
                    "type": "ExecuteSql",
                    "parameters": {
                        "sql": "SELECT * FROM SYS.M_HOST_INFORMATION"
                    }
                }
            ]
        },
        {
            "name": "SystemOverview",
            "description": "SAP HANA System Overview",
            "customLog": "SapHana_SystemOverview",
            "frequencySecs": 86400,
            "includeInCustomerAnalytics": true,
            "actions": [
                {
                    "type": "ExecuteSql",
                    "parameters": {
                        "sql": "SELECT * FROM SYS.M_SYSTEM_OVERVIEW"
                    }
                }
            ]
        },
        {
            "name": "LoadHistory",
            "description": "SAP HANA Load History",
            "customLog": "SapHana_LoadHistory",
            "frequencySecs": 60,
            "includeInCustomerAnalytics": true,
            "actions": [
                {
                    "type": "ExecuteSql",
                    "parameters": {
                        "isTimeSeries": true,
                        "initialTimespanSecs": 3600,
                        "sql": "SELECT h.TIME AS _SERVER_LOCALTIME, LOCALTOUTC(h.TIME, IFNULL(i.VALUE, 'UTC')) AS _TIMESERIES_UTC, h.HOST AS HOST, 'HOST' AS SCOPE, MAP(h.CPU, NULL, NULL, -1, NULL, ROUND(100 * h.CPU / 1) / 100) AS CPU, MAP(h.MEMORY_RESIDENT, NULL, NULL , -1, NULL, ROUND(100 * h.MEMORY_RESIDENT / 1048576) / 100) AS MEMORY_RESIDENT, MAP(h.MEMORY_TOTAL_RESIDENT, NULL, NULL , -1, NULL, ROUND(100 * h.MEMORY_TOTAL_RESIDENT / 1048576) / 100) AS MEMORY_TOTAL_RESIDENT, MAP(h.MEMORY_SIZE, NULL, NULL, -1, NULL, ROUND(100 * h.MEMORY_SIZE / 1048576) / 100) AS MEMORY_SIZE, MAP(h.MEMORY_USED, NULL, NULL, -1, NULL, ROUND(100 * h.MEMORY_USED / 1048576) / 100) AS MEMORY_USED, MAP(h.MEMORY_ALLOCATION_LIMIT, NULL, NULL, -1, NULL, ROUND(100 * h.MEMORY_ALLOCATION_LIMIT / 1048576) / 100) AS MEMORY_ALLOCATION_LIMIT, MAP(h.DISK_USED, NULL, NULL, -1, NULL, ROUND(100 * h.DISK_USED / 1073741824) / 100) AS DISK_USED, MAP(h.DISK_SIZE, NULL, NULL, -1, NULL, ROUND(100 * h.DISK_SIZE / 1073741824) / 100) AS DISK_SIZE, MAP(LAG(h.TIME) OVER (ORDER BY h.HOST, h.TIME), NULL, NULL,  MAP(SUBSTRING(CAST(h.NETWORK_IN AS VARCHAR),0, 1) ,'-', NULL, 'n', NULL, ROUND(10000000 * (100 * h.NETWORK_IN / (NANO100_BETWEEN(LAG(h.TIME) OVER (ORDER BY h.HOST, h.TIME), h.TIME))) / 1048576) / 100)) AS NETWORK_IN, MAP(LAG(h.TIME) OVER (ORDER BY h.HOST, h.TIME), NULL, -1, MAP(SUBSTRING(CAST(h.NETWORK_OUT AS VARCHAR), 0, 1) ,'-', NULL, 'n', NULL, ROUND(10000000 * (100 * h.NETWORK_OUT / (NANO100_BETWEEN(LAG(h.TIME) OVER (ORDER BY h.HOST, h. TIME), h.TIME))) / 1048576) / 100)) AS NETWORK_OUT FROM SYS.M_LOAD_HISTORY_HOST h LEFT OUTER JOIN (SELECT HOST, KEY, VALUE FROM SYS.M_HOST_INFORMATION WHERE UPPER(KEY) = 'TIMEZONE_NAME') i ON h.HOST = i.HOST WHERE LOCALTOUTC(h.TIME, IFNULL(i.VALUE, 'UTC')) > {lastRunServerUtc} ORDER BY h.TIME ASC"
                    }
                }
            ]
        },
        {
            "name": "Disks",
            "description": "SAP HANA Disks",
            "customLog": "SapHana_Disks",
            "frequencySecs": 60,
            "includeInCustomerAnalytics": true,
            "actions": [
                {
                    "type": "ExecuteSql",
                    "parameters": {
                        "sql": "SELECT HOST, PATH, SUBPATH, USAGE_TYPE, USED_SIZE, TOTAL_SIZE, TOTAL_DEVICE_SIZE FROM SYS.M_DISKS"
                    }
                }
            ]
        },
        {
            "name": "SystemAvailability",
            "description": "SAP HANA System Availability",
            "customLog": "SapHana_SystemAvailability",
            "frequencySecs": 60,
            "includeInCustomerAnalytics": true,
            "actions": [
                {
                    "type": "ExecuteSql",
                    "parameters": {
                        "isTimeSeries": true,
                        "initialTimespanSecs": 31536000,
                        "sql": "SELECT EVENT_TIME AS _SERVER_LOCALTIME, LOCALTOUTC(EVENT_TIME) AS _TIMESERIES_UTC, * FROM M_SYSTEM_AVAILABILITY WHERE EVENT_NAME <> 'PING' AND LOCALTOUTC(EVENT_TIME) > {lastRunServerUtc} ORDER BY EVENT_TIME ASC"
                    }
                }
            ]
        },
        {
            "name": "SqlProbe",
            "description": "Probe for SAP HANA SQL connection",
            "customLog": "SapHana_SqlProbe",
            "frequencySecs": 60,
            "includeInCustomerAnalytics": true,
            "actions": [
                {
                    "type": "ProbeSqlConnection",
                    "parameters": {
                        "probeTimeout": 3000
                    }
                }
            ]
        },
        {
            "name": "BackupCatalog",
            "description": "SAP HANA Backup Catalog",
            "customLog": "SapHana_BackupCatalog",
            "frequencySecs": 300,
            "includeInCustomerAnalytics": true,
            "actions": [
                {
                    "type": "ExecuteSql",
                    "parameters": {
                        "isTimeSeries": true,
                        "initialTimespanSecs": 604800,
                        "sql": "SELECT (SELECT TOP 1 MHI.VALUE FROM SYS.M_HOST_INFORMATION AS MHI WHERE UPPER(MHI.KEY) = 'SID') AS SYSTEM_ID, MBC.DATABASE_NAME, MBC.ENTRY_TYPE_NAME, MBC.BACKUP_ID, MIN(MBC.UTC_START_TIME) AS UTC_START_TIME, MAX(MBC.UTC_END_TIME) AS UTC_END_TIME, (NANO100_BETWEEN(MIN(MBC.UTC_START_TIME), MAX(MBC.UTC_END_TIME)) / 10000000) AS TIME_ELAPSED_SECONDS, MBC.STATE_NAME, MBC.COMMENT, MBC.MESSAGE, SUM(MBCF.BACKUP_SIZE) AS BACKUP_SIZE_BYTES, (SUM(MBCF.BACKUP_SIZE) / 1024 / (NANO100_BETWEEN(MIN(MBC.UTC_START_TIME), MAX(MBC.UTC_END_TIME)) / 10000000)) AS BACKUP_RATE_KBYTES_PER_SECOND, COUNT(*) AS NUMBER_OF_FILES, MBCF.DESTINATION_TYPE_NAME, CURRENT_TIMESTAMP AS _SERVER_LOCALTIME, CURRENT_UTCTIMESTAMP AS _SERVER_UTC, CURRENT_UTCTIMESTAMP AS _TIMESERIES_UTC FROM SYS_DATABASES.M_BACKUP_CATALOG AS MBC INNER JOIN SYS_DATABASES.M_BACKUP_CATALOG_FILES AS MBCF ON MBC.ENTRY_ID = MBCF.ENTRY_ID WHERE MBC.STATE_NAME NOT LIKE 'running' AND MBC.UTC_END_TIME > {lastRunServerUtc} GROUP BY SYSTEM_ID, MBC.DATABASE_NAME, MBC.ENTRY_TYPE_NAME, MBC.BACKUP_ID, MBC.STATE_NAME, MBC.COMMENT, MBC.MESSAGE, MBCF.DESTINATION_TYPE_NAME, MBC.UTC_END_TIME ORDER BY MBC.BACKUP_ID ASC"
                    }
                }
            ]
        },
        {
            "name": "SystemReplication",
            "description": "SAP HANA System Replication",
            "customLog": "SapHana_SystemReplication",
            "frequencySecs": 60,
            "includeInCustomerAnalytics": true,
            "actions": [
                {
                    "type": "ExecuteSql",
                    "parameters": {
                        "sql": "SELECT MHI.VALUE AS SYSTEM_ID, MSRVR.HOST, MSRV.SERVICE_NAME, MSRV.ACTIVE_STATUS, MSRVR.SITE_NAME, MSRVR.DATABASE_NAME, MSRVR.SECONDARY_HOST, MSRVR.SECONDARY_SITE_NAME, MSRVR.REPLICATION_MODE, MSYSR.OPERATION_MODE, MSYSR.TIER, MSYSR.REPLICATION_STATUS AS SYSTEM_REPLICATION_STATUS, MSRVR.REPLICATION_STATUS AS SERVICE_REPLICATION_STATUS, MSRVR.REPLICATION_STATUS_DETAILS AS SERVICE_REPLICATION_STATUS_DETAILS, MSYSR.SECONDARY_READ_ACCESS_STATUS, MSRVR.SECONDARY_FULLY_RECOVERABLE, MSRVR.FULL_SYNC, MSRVR.SHIPPED_LOG_BUFFERS_SIZE, MSRVR.SHIPPED_LOG_BUFFERS_COUNT, MSRVR.SHIPPED_LOG_BUFFERS_DURATION, MSRVR.SHIPPED_FULL_REPLICA_SIZE, MSRVR.SHIPPED_FULL_REPLICA_DURATION, MSRVR.SECONDARY_RECONNECT_COUNT, MSRVR.SECONDARY_FAILOVER_COUNT, MSRVR.LAST_LOG_POSITION, MSRVR.LAST_LOG_POSITION_TIME, MSRVR.SHIPPED_LOG_POSITION, MSRVR.SHIPPED_LOG_POSITION_TIME, MSRVR.SHIPPED_SAVEPOINT_START_TIME, MSRVR.REPLAYED_LOG_POSITION, MSRVR.REPLAYED_LOG_POSITION_TIME, MSRVR.REPLAY_BACKLOG_SIZE, MSRVR.REPLAY_BACKLOG_TIME, MVIOS.TOTAL_WRITE_SIZE, MVIOS.TOTAL_WRITE_TIME, MVIOS.TOTAL_TRIGGER_ASYNC_WRITES, SECONDS_BETWEEN(MSRVR.SHIPPED_LOG_POSITION_TIME, MSRVR.LAST_LOG_POSITION_TIME) AS TIME_DIFF_SECONDS, TO_DECIMAL((MSRVR.LAST_LOG_POSITION - MSRVR.SHIPPED_LOG_POSITION) * 64 / 1024 / 1024, 10, 2) AS ASYNC_BUFF_USED_MB, CURRENT_TIMESTAMP AS _SERVER_LOCALTIME, CURRENT_UTCTIMESTAMP AS _SERVER_UTC FROM SYS_DATABASES.M_SERVICE_REPLICATION AS MSRVR JOIN SYS_DATABASES.M_SYSTEM_REPLICATION AS MSYSR ON MSYSR.DATABASE_NAME = MSRVR.DATABASE_NAME AND MSYSR.SITE_ID = MSRVR.SITE_ID AND MSYSR.SECONDARY_SITE_ID = MSRVR.SECONDARY_SITE_ID LEFT OUTER JOIN SYS_DATABASES.M_VOLUME_IO_TOTAL_STATISTICS AS MVIOS ON MSRVR.DATABASE_NAME = MVIOS.DATABASE_NAME AND MSRVR.HOST = MVIOS.HOST AND MSRVR.PORT = MVIOS.PORT AND MVIOS.TYPE = 'LOG' LEFT OUTER JOIN SYS_DATABASES.M_SERVICES AS MSRV ON MSRVR.PORT = MSRV.PORT AND MSRVR.HOST = MSRV.HOST INNER JOIN SYS.M_HOST_INFORMATION AS MHI ON UPPER(MHI.KEY) = 'SID' AND MHI.HOST = MSRVR.HOST GROUP BY MHI.VALUE, MSRVR.HOST, MSRVR.PORT, MSRV.SERVICE_NAME, MSRV.ACTIVE_STATUS, MSRVR.SITE_NAME, MSRVR.DATABASE_NAME, MSRVR.SECONDARY_HOST, MSRVR.SECONDARY_SITE_NAME, MSRVR.REPLICATION_MODE, MSYSR.OPERATION_MODE, MSRVR.VOLUME_ID, MSYSR.TIER, MSYSR.REPLICATION_STATUS, MSRVR.REPLICATION_STATUS, MSRVR.REPLICATION_STATUS_DETAILS, MSYSR.SECONDARY_READ_ACCESS_STATUS, MSRVR.SECONDARY_FULLY_RECOVERABLE, MSRVR.FULL_SYNC, MSRVR.SHIPPED_LOG_BUFFERS_SIZE, MSRVR.SHIPPED_LOG_BUFFERS_COUNT, MSRVR.SHIPPED_LOG_BUFFERS_DURATION, MSRVR.SHIPPED_FULL_REPLICA_SIZE, MSRVR.SHIPPED_FULL_REPLICA_DURATION, MSRVR.SECONDARY_RECONNECT_COUNT, MSRVR.SECONDARY_FAILOVER_COUNT, MSRVR.LAST_LOG_POSITION, MSRVR.LAST_LOG_POSITION_TIME, MSRVR.SHIPPED_LOG_POSITION, MSRVR.SHIPPED_LOG_POSITION_TIME, MSRVR.SHIPPED_SAVEPOINT_START_TIME, MSRVR.REPLAYED_LOG_POSITION, MSRVR.REPLAYED_LOG_POSITION_TIME, MSRVR.REPLAY_BACKLOG_SIZE, MSRVR.REPLAY_BACKLOG_TIME, MVIOS.TOTAL_WRITE_SIZE, MVIOS.TOTAL_WRITE_TIME, MVIOS.TOTAL_TRIGGER_ASYNC_WRITES, MSRVR.LAST_LOG_POSITION, MSRVR.SHIPPED_LOG_POSITION ORDER BY MSRVR.SECONDARY_HOST DESC, MSRVR.VOLUME_ID ASC"
                    }
                }
            ]
        }
    ]
}
